-- QueueCut Database Schema\n-- PostgreSQL Database Schema for Barber Queue Management System\n\n-- Enable UUID extension\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Users table (for authentication)\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    phone VARCHAR(20),\n    avatar_url TEXT,\n    role VARCHAR(20) NOT NULL CHECK (role IN ('customer', 'barber', 'admin')),\n    is_active BOOLEAN DEFAULT true,\n    email_verified BOOLEAN DEFAULT false,\n    email_verification_token VARCHAR(255),\n    password_reset_token VARCHAR(255),\n    password_reset_expires TIMESTAMP,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Customer profiles\nCREATE TABLE customer_profiles (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    location_latitude DECIMAL(10, 8),\n    location_longitude DECIMAL(11, 8),\n    location_address TEXT,\n    favorite_shops UUID[],\n    preferred_services UUID[],\n    notification_sms BOOLEAN DEFAULT true,\n    notification_email BOOLEAN DEFAULT true,\n    notification_push BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Barber profiles\nCREATE TABLE barber_profiles (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    shop_id UUID, -- Will reference barber_shops table\n    specialties TEXT[],\n    average_service_time INTEGER DEFAULT 30, -- minutes\n    is_active BOOLEAN DEFAULT true,\n    license_number VARCHAR(100),\n    experience_years INTEGER,\n    bio TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Working hours for barbers\nCREATE TABLE barber_working_hours (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    barber_id UUID REFERENCES barber_profiles(id) ON DELETE CASCADE,\n    day_of_week INTEGER NOT NULL CHECK (day_of_week BETWEEN 0 AND 6), -- 0 = Sunday\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    is_working BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(barber_id, day_of_week)\n);\n\n-- Services offered by shops\nCREATE TABLE services (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    duration INTEGER NOT NULL, -- minutes\n    base_price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL CHECK (category IN ('haircut', 'styling', 'coloring', 'beard', 'treatment', 'other')),\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Barber shops\nCREATE TABLE barber_shops (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    owner_id UUID REFERENCES users(id),\n    \n    -- Address information\n    address_street VARCHAR(255) NOT NULL,\n    address_city VARCHAR(100) NOT NULL,\n    address_state VARCHAR(50) NOT NULL,\n    address_zip_code VARCHAR(20) NOT NULL,\n    address_country VARCHAR(50) DEFAULT 'United States',\n    latitude DECIMAL(10, 8) NOT NULL,\n    longitude DECIMAL(11, 8) NOT NULL,\n    \n    -- Contact information\n    phone VARCHAR(20),\n    email VARCHAR(255),\n    website VARCHAR(255),\n    \n    -- Business settings\n    max_advance_booking_days INTEGER DEFAULT 30,\n    slot_duration INTEGER DEFAULT 30, -- minutes\n    buffer_time INTEGER DEFAULT 10, -- minutes between appointments\n    accepts_walk_ins BOOLEAN DEFAULT true,\n    requires_deposit BOOLEAN DEFAULT false,\n    deposit_amount DECIMAL(10, 2),\n    cancellation_policy TEXT,\n    \n    -- Status and timestamps\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Shop operating hours\nCREATE TABLE shop_operating_hours (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    day_of_week INTEGER NOT NULL CHECK (day_of_week BETWEEN 0 AND 6), -- 0 = Sunday\n    open_time TIME,\n    close_time TIME,\n    is_closed BOOLEAN DEFAULT false,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(shop_id, day_of_week)\n);\n\n-- Shop services (many-to-many relationship)\nCREATE TABLE shop_services (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    service_id UUID REFERENCES services(id) ON DELETE CASCADE,\n    custom_price DECIMAL(10, 2), -- Override base price if needed\n    is_available BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(shop_id, service_id)\n);\n\n-- Shop barbers (many-to-many relationship)\nCREATE TABLE shop_barbers (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    barber_id UUID REFERENCES barber_profiles(id) ON DELETE CASCADE,\n    is_active BOOLEAN DEFAULT true,\n    hire_date DATE DEFAULT CURRENT_DATE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(shop_id, barber_id)\n);\n\n-- Add foreign key constraint for barber_profiles.shop_id\nALTER TABLE barber_profiles ADD CONSTRAINT fk_barber_shop \n    FOREIGN KEY (shop_id) REFERENCES barber_shops(id);\n\n-- Appointments\nCREATE TABLE appointments (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    customer_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    barber_id UUID REFERENCES barber_profiles(id),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    \n    -- Appointment details\n    total_duration INTEGER NOT NULL, -- minutes\n    total_price DECIMAL(10, 2) NOT NULL,\n    \n    -- Timing\n    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    scheduled_at TIMESTAMP NOT NULL,\n    estimated_start_time TIMESTAMP NOT NULL,\n    actual_start_time TIMESTAMP,\n    estimated_end_time TIMESTAMP NOT NULL,\n    actual_end_time TIMESTAMP,\n    \n    -- Status and queue info\n    status VARCHAR(20) NOT NULL DEFAULT 'pending' \n        CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show')),\n    queue_position INTEGER,\n    estimated_wait_time INTEGER, -- minutes\n    \n    -- Additional information\n    notes TEXT,\n    special_requests TEXT,\n    cancellation_reason TEXT,\n    \n    -- Notifications tracking\n    notification_booking_confirmed BOOLEAN DEFAULT false,\n    notification_reminder_sent BOOLEAN DEFAULT false,\n    notification_ready_for_service BOOLEAN DEFAULT false,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Appointment services (many-to-many)\nCREATE TABLE appointment_services (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    appointment_id UUID REFERENCES appointments(id) ON DELETE CASCADE,\n    service_id UUID REFERENCES services(id),\n    barber_id UUID REFERENCES barber_profiles(id),\n    price DECIMAL(10, 2) NOT NULL,\n    duration INTEGER NOT NULL, -- minutes\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Queue entries for real-time queue management\nCREATE TABLE queue_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    appointment_id UUID REFERENCES appointments(id) ON DELETE CASCADE,\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    barber_id UUID REFERENCES barber_profiles(id),\n    customer_id UUID REFERENCES users(id),\n    queue_position INTEGER NOT NULL,\n    estimated_wait_time INTEGER, -- minutes\n    priority_level INTEGER DEFAULT 1, -- 1 = normal, 2 = high, 3 = urgent\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Reviews and ratings\nCREATE TABLE reviews (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    customer_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    barber_id UUID REFERENCES barber_profiles(id),\n    appointment_id UUID REFERENCES appointments(id) ON DELETE SET NULL,\n    \n    -- Rating breakdown\n    overall_rating INTEGER NOT NULL CHECK (overall_rating BETWEEN 1 AND 5),\n    service_quality INTEGER CHECK (service_quality BETWEEN 1 AND 5),\n    cleanliness INTEGER CHECK (cleanliness BETWEEN 1 AND 5),\n    wait_time_accuracy INTEGER CHECK (wait_time_accuracy BETWEEN 1 AND 5),\n    value_for_money INTEGER CHECK (value_for_money BETWEEN 1 AND 5),\n    staff_friendliness INTEGER CHECK (staff_friendliness BETWEEN 1 AND 5),\n    \n    -- Review content\n    title VARCHAR(255),\n    comment TEXT,\n    \n    -- Photos\n    photo_urls TEXT[],\n    \n    -- Response from shop\n    shop_response TEXT,\n    shop_response_date TIMESTAMP,\n    \n    -- Status\n    is_verified BOOLEAN DEFAULT false,\n    is_featured BOOLEAN DEFAULT false,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Shop images\nCREATE TABLE shop_images (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    image_url TEXT NOT NULL,\n    image_type VARCHAR(20) DEFAULT 'gallery' CHECK (image_type IN ('profile', 'gallery', 'portfolio')),\n    alt_text VARCHAR(255),\n    display_order INTEGER DEFAULT 0,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Notifications\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    type VARCHAR(50) NOT NULL, -- 'appointment_confirmed', 'reminder', 'ready_for_service', etc.\n    title VARCHAR(255) NOT NULL,\n    message TEXT NOT NULL,\n    data JSONB, -- Additional data for the notification\n    \n    -- Delivery channels\n    send_email BOOLEAN DEFAULT false,\n    send_sms BOOLEAN DEFAULT false,\n    send_push BOOLEAN DEFAULT true,\n    \n    -- Status\n    is_read BOOLEAN DEFAULT false,\n    email_sent_at TIMESTAMP,\n    sms_sent_at TIMESTAMP,\n    push_sent_at TIMESTAMP,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Payment records (for deposits and payments)\nCREATE TABLE payments (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    appointment_id UUID REFERENCES appointments(id) ON DELETE SET NULL,\n    customer_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    \n    -- Payment details\n    amount DECIMAL(10, 2) NOT NULL,\n    currency VARCHAR(3) DEFAULT 'USD',\n    payment_type VARCHAR(20) NOT NULL CHECK (payment_type IN ('deposit', 'full_payment', 'tip')),\n    payment_method VARCHAR(50), -- 'stripe', 'paypal', 'cash', etc.\n    payment_intent_id VARCHAR(255), -- Stripe payment intent ID\n    \n    -- Status\n    status VARCHAR(20) NOT NULL DEFAULT 'pending' \n        CHECK (status IN ('pending', 'succeeded', 'failed', 'cancelled', 'refunded')),\n    \n    -- Refund information\n    refund_amount DECIMAL(10, 2),\n    refund_reason TEXT,\n    refunded_at TIMESTAMP,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Analytics and metrics (for shop owners)\nCREATE TABLE shop_analytics (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    shop_id UUID REFERENCES barber_shops(id) ON DELETE CASCADE,\n    date DATE NOT NULL,\n    \n    -- Daily metrics\n    total_appointments INTEGER DEFAULT 0,\n    completed_appointments INTEGER DEFAULT 0,\n    cancelled_appointments INTEGER DEFAULT 0,\n    no_show_appointments INTEGER DEFAULT 0,\n    total_revenue DECIMAL(10, 2) DEFAULT 0,\n    average_wait_time INTEGER DEFAULT 0, -- minutes\n    customer_satisfaction DECIMAL(3, 2), -- average rating\n    \n    -- Queue metrics\n    peak_queue_length INTEGER DEFAULT 0,\n    average_queue_length DECIMAL(5, 2) DEFAULT 0,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(shop_id, date)\n);\n\n-- Create indexes for better performance\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_role ON users(role);\nCREATE INDEX idx_appointments_customer_id ON appointments(customer_id);\nCREATE INDEX idx_appointments_barber_id ON appointments(barber_id);\nCREATE INDEX idx_appointments_shop_id ON appointments(shop_id);\nCREATE INDEX idx_appointments_status ON appointments(status);\nCREATE INDEX idx_appointments_scheduled_at ON appointments(scheduled_at);\nCREATE INDEX idx_queue_entries_shop_id ON queue_entries(shop_id);\nCREATE INDEX idx_queue_entries_position ON queue_entries(queue_position);\nCREATE INDEX idx_barber_shops_location ON barber_shops(latitude, longitude);\nCREATE INDEX idx_reviews_shop_id ON reviews(shop_id);\nCREATE INDEX idx_notifications_user_id ON notifications(user_id);\nCREATE INDEX idx_notifications_is_read ON notifications(is_read);\n\n-- Create updated_at trigger function\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers to relevant tables\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_customer_profiles_updated_at BEFORE UPDATE ON customer_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_barber_profiles_updated_at BEFORE UPDATE ON barber_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_services_updated_at BEFORE UPDATE ON services FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_barber_shops_updated_at BEFORE UPDATE ON barber_shops FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_appointments_updated_at BEFORE UPDATE ON appointments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_queue_entries_updated_at BEFORE UPDATE ON queue_entries FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_payments_updated_at BEFORE UPDATE ON payments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();